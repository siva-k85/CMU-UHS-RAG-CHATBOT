version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: cmu-rag-postgres
    environment:
      POSTGRES_DB: cmu_health_rag
      POSTGRES_USER: raguser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raguser -d cmu_health_rag"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cmu-rag-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: cmu-rag-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cmu-rag-network

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cmu-rag-backend
    environment:
      # Database config
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cmu_health_rag
      SPRING_DATASOURCE_USERNAME: raguser
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      
      # Redis config
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      
      # OpenAI config
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Application config
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      
      # JVM options
      JAVA_OPTS: "-Xms512m -Xmx1024m"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - cmu-rag-network
    volumes:
      - ./data:/app/data

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cmu-rag-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8080
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - cmu-rag-network

  # Nginx Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: cmu-rag-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - cmu-rag-network

networks:
  cmu-rag-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: